---

---

<section>
  <div id="menu-bar">
    <div class="rd red"></div>
    <div class="rd yellow"></div>
    <div class="rd green"></div>
  </div>
  <div id="terminal">
    <div id="output"></div>
    <label for="input" class="prompt">~<input id="input" type="text" autofocus /></label>
  </div>
</section>

<script>
  import { commands } from "../../../../config/terminalConfig";

  const inputDiv = document.getElementById("input");
  const outputDiv = document.getElementById("output");
  const terminalDiv = document.getElementById("terminal");

  (inputDiv as HTMLInputElement).value = "";

  function clearTerminal() {
    while (outputDiv.firstChild) {
      outputDiv.removeChild(outputDiv.firstChild);
    }
    terminalDiv.scrollTop = terminalDiv.scrollHeight;
  }

  terminalDiv.addEventListener("click", () => {
    inputDiv.focus();
  });

  inputDiv.addEventListener("keydown", function (e) {
    if (e.key === "Enter") {
      const input = (e.target as HTMLInputElement).value.trim();
      const lowerCaseInput = input.toLocaleLowerCase();
      if (lowerCaseInput === "") return;

      outputDiv.innerHTML += `<div style="margin-top: 0.35rem; color:var(--system-font-clr);"><span style="color:#ff5f56; margin-right:0.5rem;">~</span>${input}</div>`;

      function terminalOutput() {
        if (lowerCaseInput in commands) {
          outputDiv.innerHTML += `<div style="color:var(--system-font-clr);">${commands[lowerCaseInput].response}</div>`;
          outputDiv.innerHTML += `<br/>`;

          // outputDiv.innerHTML += `<div style="color:#707070;">suggested command: <b>${commands[lowerCaseInput].suggestedCommand}</b></div>`;
          outputDiv.innerHTML += `<div style="color:var(--system-font-clr);">suggested command: <b>${commands[lowerCaseInput].suggestedCommand}</b></div>`;
        } else {
          outputDiv.innerHTML += `<div style="color:var(--system-font-clr);">command not found: ${input}`;
        }
      }

      (e.target as HTMLInputElement).value = "";

      function toggleTheme() {
        const current = document.documentElement.getAttribute("data-theme");
        const next = current === "dark" ? "light" : "dark";
        document.documentElement.setAttribute("data-theme", next);
        localStorage.setItem("theme", next);
      }

      switch (lowerCaseInput) {
        case "clear":
          clearTerminal();
          break;
        case "toggle-theme":
          toggleTheme();
          break;
        default:
          terminalOutput();
          break;
      }

      outputDiv.scrollTop = outputDiv.scrollHeight;
      terminalDiv.scrollTop = terminalDiv.scrollHeight;
    }
  });
</script>

<style>
  section {
    background-color: var(--component-bg-clr);
    border: 2px solid var(--system-font-clr);
    margin-inline: auto;
    margin-block: 15px;
    width: 550px;
    height: 275px;
  }

  #menu-bar {
    display: flex;
    border-bottom: 2px solid var(--system-font-clr);
  }

  .rd {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    margin: 4px;
  }

  .red {
    background-color: #ff5f56;
  }

  .yellow {
    background-color: #febc2e;
  }

  .green {
    background-color: #28c840;
  }

  #terminal {
    overflow: auto;
    height: 90%;
  }

  input {
    border: none;
    margin-inline: 0.5rem;
    margin-block: 0.5rem;
    background-color: var(--component-bg-clr);
    color: var(--component-font-clr);
  }

  div > label {
    font-size: 1rem;
    margin-inline: 0.5rem;
  }

  #output {
    margin-inline: 0.5rem;
  }

  .prompt {
    color: #ff5f56;
  }

  @media (width <= 900px) {
    section {
      width: 350px;
    }
  }
</style>
